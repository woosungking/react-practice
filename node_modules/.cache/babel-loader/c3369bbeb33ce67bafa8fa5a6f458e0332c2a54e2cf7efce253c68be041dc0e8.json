{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Desktop/study/javascripts-practice/reactpractice/src/\\bhook/UseStateHookEx.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst UseStateHookEx = () => {\n  _s();\n  const [clock, setClock] = useState(1);\n  const timeUpdate = () => {\n    setClock(clock + 1);\n  };\n  const [names, setNames] = useState([\"심재홍\", \"양세현\"]);\n  // 초기값에는 배열이 들어 갈 수 있다.\n  const [input, setInput] = useState('');\n  const handleInputChange = event => {\n    setInput(event.target.value);\n    console.log(input);\n  };\n  const handleUpload = () => {\n    setNames(prevState => {\n      // 현제 Names라는 State에는 [심재홍, 양세현]이 들어있으므로, prevState라는 배열에는 \"[심재홍, 양세현]\" 이 들어있음.\n      return [input, ...prevState];\n    });\n    //set이름(()=>{}) 이런식으로 콜백함수를 쓰면 \"이름\"에 저장되어있는 상태를 가지고 옴.\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        children: \"upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this), names.map((name, idx) => {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \\uD0A4:\", idx, \" \\uAC12:\", name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 24\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\uD604\\uC81C \\uC2DC\\uAC04 \", clock, \"\\uC2DC\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: timeUpdate,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(UseStateHookEx, \"5tB0aniqy/eXUnI8mFcVtzcCB+0=\");\n_c = UseStateHookEx;\nexport default UseStateHookEx;\nvar _c;\n$RefreshReg$(_c, \"UseStateHookEx\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","UseStateHookEx","_s","clock","setClock","timeUpdate","names","setNames","input","setInput","handleInputChange","event","target","value","console","log","handleUpload","prevState","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","name","idx","_c","$RefreshReg$"],"sources":["/Users/apple/Desktop/study/javascripts-practice/reactpractice/src/\bhook/UseStateHookEx.jsx"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst UseStateHookEx=()=>{\n    const [clock, setClock] = useState(1);\n    const timeUpdate=()=>{\n        setClock(clock + 1);\n    }\n\n    const [names, setNames] = useState([\"심재홍\",\"양세현\"]);\n    // 초기값에는 배열이 들어 갈 수 있다.\n    const [input, setInput] = useState('');\n\n    const handleInputChange=(event)=>{\n        setInput(event.target.value);\n        console.log(input)\n    };\n\n    const handleUpload=()=>{\n        setNames((prevState)=>{ // 현제 Names라는 State에는 [심재홍, 양세현]이 들어있으므로, prevState라는 배열에는 \"[심재홍, 양세현]\" 이 들어있음.\n            return[input, ...prevState];\n        });\n        //set이름(()=>{}) 이런식으로 콜백함수를 쓰면 \"이름\"에 저장되어있는 상태를 가지고 옴.\n    }\n    return(\n    <>\n        <div>\n            <input type=\"text\" value={input} onChange={handleInputChange} />\n            <button onClick={handleUpload}>upload</button>\n            {names.map((name, idx)=>{\n                return <p> 키:{idx} 값:{name}</p>;\n            })}\n        </div>\n        <div>\n        <span>현제 시간 {clock}시</span>\n        <button onClick={timeUpdate}>Update</button>\n        </div>\n    </>\n    );\n};\n\nexport default UseStateHookEx;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExC,MAAMC,cAAc,GAACA,CAAA,KAAI;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAMS,UAAU,GAACA,CAAA,KAAI;IACjBD,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;EACvB,CAAC;EAED,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,CAAC,KAAK,EAAC,KAAK,CAAC,CAAC;EACjD;EACA,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMc,iBAAiB,GAAEC,KAAK,IAAG;IAC7BF,QAAQ,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IAC5BC,OAAO,CAACC,GAAG,CAACP,KAAK,CAAC;EACtB,CAAC;EAED,MAAMQ,YAAY,GAACA,CAAA,KAAI;IACnBT,QAAQ,CAAEU,SAAS,IAAG;MAAE;MACpB,OAAM,CAACT,KAAK,EAAE,GAAGS,SAAS,CAAC;IAC/B,CAAC,CAAC;IACF;EACJ,CAAC;EACD,oBACAnB,OAAA,CAAAE,SAAA;IAAAkB,QAAA,gBACIpB,OAAA;MAAAoB,QAAA,gBACIpB,OAAA;QAAOqB,IAAI,EAAC,MAAM;QAACN,KAAK,EAAEL,KAAM;QAACY,QAAQ,EAAEV;MAAkB;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAChE1B,OAAA;QAAQ2B,OAAO,EAAET,YAAa;QAAAE,QAAA,EAAC;MAAM;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAC7ClB,KAAK,CAACoB,GAAG,CAAC,CAACC,IAAI,EAAEC,GAAG,KAAG;QACpB,oBAAO9B,OAAA;UAAAoB,QAAA,GAAG,UAAG,EAACU,GAAG,EAAC,UAAG,EAACD,IAAI;QAAA;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MACnC,CAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACN1B,OAAA;MAAAoB,QAAA,gBACApB,OAAA;QAAAoB,QAAA,GAAM,4BAAM,EAACf,KAAK,EAAC,QAAC;MAAA;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC3B1B,OAAA;QAAQ2B,OAAO,EAAEpB,UAAW;QAAAa,QAAA,EAAC;MAAM;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC;EAAA,eACR,CAAC;AAEP,CAAC;AAACtB,EAAA,CApCID,cAAc;AAAA4B,EAAA,GAAd5B,cAAc;AAsCpB,eAAeA,cAAc;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}