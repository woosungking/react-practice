{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Desktop/study/javascripts-practice/reactpractice/src/chapter_07/NotificationList.jsx\";\nimport React from \"react\";\nimport Notification from \"./Notification\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst reserveNotifications = [{\n  message: \"안녕\"\n}, {\n  message: \"점심 먹을 시간이야\"\n}, {\n  message: \"셋셀동안 일어나라\"\n}];\nvar timer;\nclass NotificationList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      notifications: []\n      // 앞으로 생성 할 데이터를 state에 넣어서 초기화\n    };\n  }\n  componentDidMount() {\n    timer = setInterval(() => {\n      const {\n        notifications\n      } = this.state;\n      //const notifications = this.state.notifications;\n\n      if (notifications.length < reserveNotifications.length) {\n        const index = notifications.length;\n        // 새로운 배열 생성을 통해 불변성을 보장하고 상태를 업데이트 \n        this.setState({\n          // state를 업데이트 하기 위해 setState 함수를 사용함.\n          notifications: notifications.concat(reserveNotifications[index])\n        });\n      } else {\n        clearInterval(timer);\n      }\n    }, 1000);\n  }\n  //reservedNotification(알람 데이터 배열) 로 부터 알림 데이터를 하나씩 가지고 와서 state에 있는 notification 배열에 넣고 업데이트 하는 역할을함.\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.notifications.map(notification => {\n        // 상태 이름 수정\n        return /*#__PURE__*/_jsxDEV(Notification, {\n          message: notification.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default NotificationList;","map":{"version":3,"names":["React","Notification","jsxDEV","_jsxDEV","reserveNotifications","message","timer","NotificationList","Component","constructor","props","state","notifications","componentDidMount","setInterval","length","index","setState","concat","clearInterval","render","children","map","notification","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/apple/Desktop/study/javascripts-practice/reactpractice/src/chapter_07/NotificationList.jsx"],"sourcesContent":["import React from \"react\";\nimport Notification from \"./Notification\";\n\nconst reserveNotifications = [\n    { message: \"안녕\" },\n    { message: \"점심 먹을 시간이야\" },\n    { message: \"셋셀동안 일어나라\" },\n];\n\nvar timer;\n\nclass NotificationList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            notifications: [], \n            // 앞으로 생성 할 데이터를 state에 넣어서 초기화\n        };\n    }\n    \n    componentDidMount() {\n        timer = setInterval(() => {\n            const { notifications } = this.state;\n            //const notifications = this.state.notifications;\n\n\n            if (notifications.length < reserveNotifications.length) {\n                const index = notifications.length;\n                // 새로운 배열 생성을 통해 불변성을 보장하고 상태를 업데이트 \n                this.setState({ // state를 업데이트 하기 위해 setState 함수를 사용함.\n                    notifications: notifications.concat(reserveNotifications[index]),\n                });\n            } else {\n                clearInterval(timer);\n            }\n        }, 1000);\n    }\n    //reservedNotification(알람 데이터 배열) 로 부터 알림 데이터를 하나씩 가지고 와서 state에 있는 notification 배열에 넣고 업데이트 하는 역할을함.\n\n    render() {\n        return (\n            <div>\n                {this.state.notifications.map((notification) => { // 상태 이름 수정\n                    return <Notification message={notification.message} />;\n                })}\n            </div>\n        );\n    }\n}\n\nexport default NotificationList;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,oBAAoB,GAAG,CACzB;EAAEC,OAAO,EAAE;AAAK,CAAC,EACjB;EAAEA,OAAO,EAAE;AAAa,CAAC,EACzB;EAAEA,OAAO,EAAE;AAAY,CAAC,CAC3B;AAED,IAAIC,KAAK;AAET,MAAMC,gBAAgB,SAASP,KAAK,CAACQ,SAAS,CAAC;EAC3CC,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MACTC,aAAa,EAAE;MACf;IACJ,CAAC;EACL;EAEAC,iBAAiBA,CAAA,EAAG;IAChBP,KAAK,GAAGQ,WAAW,CAAC,MAAM;MACtB,MAAM;QAAEF;MAAc,CAAC,GAAG,IAAI,CAACD,KAAK;MACpC;;MAGA,IAAIC,aAAa,CAACG,MAAM,GAAGX,oBAAoB,CAACW,MAAM,EAAE;QACpD,MAAMC,KAAK,GAAGJ,aAAa,CAACG,MAAM;QAClC;QACA,IAAI,CAACE,QAAQ,CAAC;UAAE;UACZL,aAAa,EAAEA,aAAa,CAACM,MAAM,CAACd,oBAAoB,CAACY,KAAK,CAAC;QACnE,CAAC,CAAC;MACN,CAAC,MAAM;QACHG,aAAa,CAACb,KAAK,CAAC;MACxB;IACJ,CAAC,EAAE,IAAI,CAAC;EACZ;EACA;;EAEAc,MAAMA,CAAA,EAAG;IACL,oBACIjB,OAAA;MAAAkB,QAAA,EACK,IAAI,CAACV,KAAK,CAACC,aAAa,CAACU,GAAG,CAAEC,YAAY,IAAK;QAAE;QAC9C,oBAAOpB,OAAA,CAACF,YAAY;UAACI,OAAO,EAAEkB,YAAY,CAAClB;QAAQ;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAC1D,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAEd;AACJ;AAEA,eAAepB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}